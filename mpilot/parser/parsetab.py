
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA EQUAL FALSE FLOAT ID INT LBRACK LPAREN MINUS PLAIN_STRING PLUS RBRACK RPAREN STRING TRUE\n        program : commands\n        \n        commands : command commands\n        \n        commands : command\n        \n        command : ID EQUAL ID arguments\n        \n        arguments : LPAREN argument_list RPAREN\n        \n        arguments : LPAREN RPAREN\n        \n        argument_list : argument COMMA argument_list\n        \n        argument_list : argument COMMA\n                      | argument\n        \n        argument : ID EQUAL expression\n        \n        expression : ID\n                   | PLAIN_STRING\n                   | STRING\n                   | number\n                   | list\n                   | boolean\n        \n        expression : ID expression\n        \n        number : INT\n               | FLOAT\n        \n        number : PLUS number\n               | MINUS number\n        \n        list : LBRACK elements RBRACK\n        \n        list : LBRACK RBRACK\n        \n        elements : element COMMA elements\n        \n        elements : element COMMA\n                 | element\n        \n        element : expression\n        \n        boolean : TRUE\n                | FALSE\n        '
    
_lr_action_items = {'ID':([0,3,6,8,9,11,14,15,16,18,29,40,],[4,4,7,-4,13,-6,-5,13,18,18,18,18,]),'$end':([1,2,3,5,8,11,14,],[0,-1,-3,-2,-4,-6,-5,]),'EQUAL':([4,13,],[6,16,]),'LPAREN':([7,],[9,]),'RPAREN':([9,10,12,15,17,18,19,20,21,22,23,24,25,26,30,31,32,33,34,36,39,],[11,14,-9,-8,-7,-11,-10,-12,-13,-14,-15,-16,-18,-19,-28,-29,-17,-20,-21,-23,-22,]),'COMMA':([12,18,19,20,21,22,23,24,25,26,30,31,32,33,34,36,37,38,39,],[15,-11,-10,-12,-13,-14,-15,-16,-18,-19,-28,-29,-17,-20,-21,-23,40,-27,-22,]),'PLAIN_STRING':([16,18,29,40,],[20,20,20,20,]),'STRING':([16,18,29,40,],[21,21,21,21,]),'INT':([16,18,27,28,29,40,],[25,25,25,25,25,25,]),'FLOAT':([16,18,27,28,29,40,],[26,26,26,26,26,26,]),'PLUS':([16,18,27,28,29,40,],[27,27,27,27,27,27,]),'MINUS':([16,18,27,28,29,40,],[28,28,28,28,28,28,]),'LBRACK':([16,18,29,40,],[29,29,29,29,]),'TRUE':([16,18,29,40,],[30,30,30,30,]),'FALSE':([16,18,29,40,],[31,31,31,31,]),'RBRACK':([18,20,21,22,23,24,25,26,29,30,31,32,33,34,35,36,37,38,39,40,41,],[-11,-12,-13,-14,-15,-16,-18,-19,36,-28,-29,-17,-20,-21,39,-23,-26,-27,-22,-25,-24,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'commands':([0,3,],[2,5,]),'command':([0,3,],[3,3,]),'arguments':([7,],[8,]),'argument_list':([9,15,],[10,17,]),'argument':([9,15,],[12,12,]),'expression':([16,18,29,40,],[19,32,38,38,]),'number':([16,18,27,28,29,40,],[22,22,33,34,22,22,]),'list':([16,18,29,40,],[23,23,23,23,]),'boolean':([16,18,29,40,],[24,24,24,24,]),'elements':([29,40,],[35,41,]),'element':([29,40,],[37,37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> commands','program',1,'p_program','parser.py',87),
  ('commands -> command commands','commands',2,'p_commands','parser.py',94),
  ('commands -> command','commands',1,'p_commands_command','parser.py',101),
  ('command -> ID EQUAL ID arguments','command',4,'p_command','parser.py',108),
  ('arguments -> LPAREN argument_list RPAREN','arguments',3,'p_arguments','parser.py',115),
  ('arguments -> LPAREN RPAREN','arguments',2,'p_argument_empty','parser.py',122),
  ('argument_list -> argument COMMA argument_list','argument_list',3,'p_argument_list','parser.py',129),
  ('argument_list -> argument COMMA','argument_list',2,'p_argument_list_argument','parser.py',136),
  ('argument_list -> argument','argument_list',1,'p_argument_list_argument','parser.py',137),
  ('argument -> ID EQUAL expression','argument',3,'p_argument','parser.py',143),
  ('expression -> ID','expression',1,'p_expression','parser.py',150),
  ('expression -> PLAIN_STRING','expression',1,'p_expression','parser.py',151),
  ('expression -> STRING','expression',1,'p_expression','parser.py',152),
  ('expression -> number','expression',1,'p_expression','parser.py',153),
  ('expression -> list','expression',1,'p_expression','parser.py',154),
  ('expression -> boolean','expression',1,'p_expression','parser.py',155),
  ('expression -> ID expression','expression',2,'p_expression_identifier_expression','parser.py',162),
  ('number -> INT','number',1,'p_number','parser.py',169),
  ('number -> FLOAT','number',1,'p_number','parser.py',170),
  ('number -> PLUS number','number',2,'p_number_unary','parser.py',177),
  ('number -> MINUS number','number',2,'p_number_unary','parser.py',178),
  ('list -> LBRACK elements RBRACK','list',3,'p_list','parser.py',188),
  ('list -> LBRACK RBRACK','list',2,'p_list_empty','parser.py',195),
  ('elements -> element COMMA elements','elements',3,'p_elements','parser.py',202),
  ('elements -> element COMMA','elements',2,'p_elements_element','parser.py',209),
  ('elements -> element','elements',1,'p_elements_element','parser.py',210),
  ('element -> expression','element',1,'p_element_expression','parser.py',217),
  ('boolean -> TRUE','boolean',1,'p_boolean','parser.py',224),
  ('boolean -> FALSE','boolean',1,'p_boolean','parser.py',225),
]
